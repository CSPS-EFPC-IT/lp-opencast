#!/bin/bash
#
# Install and launch OpenCast.
# This script must be run as root (ex.: sudo sh ./[script_name])
# Style Guide: https://google.github.io/styleguide/shellguide.html

# Parameters: all manadatory and must be prefixed with "--" on command line.
declare -A parameters=( \
  [app_opensearch_java_opts]="" \
  [app_org_opencastproject_db_jdbc_pass]="" \
  [app_org_opencastproject_db_jdbc_url]="" \
  [app_org_opencastproject_db_jdbc_user]="" \
  [app_org_opencastproject_download_url]="" \
  [app_org_opencastproject_security_admin_pass]="" \
  [app_org_opencastproject_security_admin_user]="" \
  [app_org_opencastproject_security_digest_pass]="" \
  [app_org_opencastproject_security_digest_user]="" \
  [app_org_opencastproject_server_url_admin]="" \
  [app_org_opencastproject_server_url_presentation]="" \
  [app_org_opencastproject_server_url_worker]="" \
  [app_prop_org_opencastproject_admin_ui_url]=""\
  [app_prop_org_opencastproject_engage_ui_url]=""\
  [container_repository_root_name]=""\
  [container_repository_tag]=""\
  [file_service_share_name]=""\
  [file_service_share_url]=""\
  [storage_account_key]=""\
  [storage_account_name]=""\
)

# Functions

# All libraries not available at build time.
# shellcheck source=/dev/null
source ./logger.sh
#shellcheck source=/dev/null
source ./mysql.sh
#shellcheck source=/dev/null
source ./utils.sh


#######################################
# Create and mount a File Service Share.
# Arguments:
#   The Storage Account name, a string.
#   The Storage Account ney, a string.
#   The File Service Share name, a string.
#   The File Service Share URL, a string.
# Outputs:
#   Writes message to STDOUT.
#######################################
function mount_file_service_share() {

  # Parameters
  local storage_account_name="$1"
  local storage_account_key="$2"
  local file_service_share_name="$3"
  local file_service_share_url="$4"
  local mount_point_path="$5"

  # Constants
  CREDENTIALS_FOLDER_PATH="/etc/smbcredentials"
  CREDENTIALS_FILE_PATH="${CREDENTIALS_ROOT_PATH}/${storage_account_name}.cred"
  FILE_SERVICE_SHARE_FQDN=$(echo "$file_service_share_url" | awk -F[/:] '{print $4}')

  logger::info "Creating mount point directory..."
  mkdir -p "${mount_point_path}"

  logger::info "Creating credentials file..."
  if [ ! -d "${CREDENTIALS_FOLDER_PATH}" ]; then
    mkdir "${CREDENTIALS_FOLDER_PATH}"
  fi
  echo "username=${storage_account_name}" > "${CREDENTIALS_FILE_PATH}"
  echo "password=${storage_account_key}" >> "${CREDENTIALS_FILE_PATH}"
  chmod 600 "${CREDENTIALS_FILE_PATH}"

  logger::info "Saving mount point configuration..."
  echo "//${FILE_SERVICE_SHARE_FQDN}/${file_service_share_name} ${mount_point_path} cifs nofail,credentials=${CREDENTIALS_FILE_PATH},dir_mode=0777,file_mode=0777,serverino,nosharesock,actimeo=30" >> /etc/fstab

  logger::info "Mounting all drives defined in fstab file..."
  mount -a
}

function main() {
  utils::set_exit_trap
  logger::title "Start of $0"

  #############################################################################

  logger::title "Parse Input Parameters"
  utils::parse_parameters "$@"

  logger::title "Install Application Dependencies"
  apt-get update
  apt-get install -y \
    docker-compose \
    mysql-client

  logger::title "Create Database and credentials"
  # mysql::create_database_and_credentials \
  #   "${parameters[db_server_fqdn]}" \
  #   "${parameters[db_server_admin_username]}" \
  #   "${parameters[db_server_admin_password]}" \
  #   "${parameters[app_org_opencastproject_db_jdbc_user]}" \
  #   "${parameters[app_org_opencastproject_db_jdbc_pass]}" \
  #   "${parameters[db_server_db_name]}"

  logger::title "Configure File Shares"
  mount_file_service_share \
    "${parameters[storage_account_name]}" \
    "${parameters[storage_account_key]}" \
    "${parameters[file_service_share_name]}" \
    "${parameters[file_service_share_url]}" \
    "/mnt/${parameters[file_service_share_name]}"

  logger::title "Create docker-compose environment file"
  ## Créer le fichier d'environnement pour l'application.

  logger::title "Launch the application"
  ## Lancer l'application en arrière plan

  #############################################################################

  logger::title "End of $0"
  utils::unset_exit_trap
}

main "$@"
