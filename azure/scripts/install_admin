#!/bin/bash
#
# Install and launch OpenCast.
# This script must be run as root (ex.: sudo sh ./[script_name])
# Style Guide: https://google.github.io/styleguide/shellguide.html

# Parameters: all manadatory and must be prefixed with "--" on command line.
declare -A parameters=( \
  [app_opensearch_java_opts]="" \
  [app_org_opencastproject_db_jdbc_pass]="" \
  [app_org_opencastproject_db_jdbc_url]="" \
  [app_org_opencastproject_db_jdbc_user]="" \
  [app_org_opencastproject_db_vendor]="" \
  [app_org_opencastproject_security_admin_pass]="" \
  [app_org_opencastproject_security_admin_user]="" \
  [app_org_opencastproject_security_digest_pass]="" \
  [app_org_opencastproject_security_digest_user]="" \
  [app_prop_org_opencastproject_admin_ui_url]="" \
  [app_prop_org_opencastproject_engage_ui_url]="" \
  [application_subnet_address_range]="" \
  [container_repository_root_name]="" \
  [container_repository_tag]="" \
  [data_disk_size_gb]="" \
  [database_server_admin_password]="" \
  [database_server_admin_username]="" \
  [database_server_database_name]="" \
  [database_server_fqdn]="" \
)

# Functions

# All libraries not available at build time.
# shellcheck source=/dev/null
source ./logger.sh
#shellcheck source=/dev/null
source ./mysql.sh
#shellcheck source=/dev/null
source ./os.sh
#shellcheck source=/dev/null
source ./utils.sh

function main() {

  # Constants
  SHARE_ROOT="/srv/nfs4"
  SHARE_DATA_PATH="${SHARE_ROOT}/data"
  SHARE_OPENSEARCH_PATH="${SHARE_ROOT}/opensearch"

  # Variables
  current_deployment_index

  utils::set_exit_trap
  logger::title "Start of $0"

  #############################################################################

  logger::title "Parse Input Parameters"
  utils::parse_parameters "$@"

  logger::title "Install Application Dependencies"
  apt-get install --yes --quiet \
    docker-compose \
    mysql-client \
    nfs-kernel-server

  logger::title "Mount Data Disk"
  os::mount_data_disk_by_size \
    "${parameters[data_disk_size_gb]}G" \
    "${SHARE_ROOT}"

  logger::title "Configure NFS Server"
  logger::info "Creating share folders..."
  mkdir -p "${SHARE_DATA_PATH}"
  mkdir -p "${SHARE_OPENSEARCH_PATH}"

  logger::info "Configuring share access..."
  # Remove pre-existing configuration before adding it back.
  sed -i "\|^${SHARE_ROOT}|d" /etc/exports
  # Add access rules
  {
      echo "${SHARE_ROOT}             ${parameters[application_subnet_address_range]}(rw,sync,no_subtree_check,crossmnt,fsid=0)";
      echo "${SHARE_DATA_PATH}        ${parameters[application_subnet_address_range]}(rw,sync,no_subtree_check)";
      echo "${SHARE_OPENSEARCH_PATH}  ${parameters[application_subnet_address_range]}(rw,sync,no_subtree_check)"
  } >> /etc/exports
  exportfs -ar

  logger::title "Create Database and credentials"
  mysql::create_database_and_credentials \
    "${parameters[database_server_fqdn]}" \
    "${parameters[database_server_admin_username]}" \
    "${parameters[database_server_admin_password]}" \
    "${parameters[app_org_opencastproject_db_jdbc_user]}" \
    "${parameters[app_org_opencastproject_db_jdbc_pass]}" \
    "${parameters[database_server_database_name]}"

  logger::title "Create docker-compose environment file"
  cat <<EOF > config.env
ELASTICSEARCH_SERVER_HOST=opensearch
ORG_OPENCASTPROJECT_DB_JDBC_PASS=${parameters[app_org_opencastproject_db_jdbc_pass]}
ORG_OPENCASTPROJECT_DB_JDBC_URL=${parameters[app_org_opencastproject_db_jdbc_url]}
ORG_OPENCASTPROJECT_DB_JDBC_USER=${parameters[app_org_opencastproject_db_jdbc_user]}
ORG_OPENCASTPROJECT_DB_VENDOR=${parameters[app_org_opencastproject_db_vendor]}
ORG_OPENCASTPROJECT_DOWNLOAD_URL=${parameters[app_prop_org_opencastproject_engage_ui_url]}/static
ORG_OPENCASTPROJECT_SECURITY_ADMIN_PASS=${parameters[app_org_opencastproject_security_admin_pass]}
ORG_OPENCASTPROJECT_SECURITY_ADMIN_USER=${parameters[app_org_opencastproject_security_admin_user]}
ORG_OPENCASTPROJECT_SECURITY_DIGEST_PASS=${parameters[app_org_opencastproject_security_digest_pass]}
ORG_OPENCASTPROJECT_SECURITY_DIGEST_USER=${parameters[app_org_opencastproject_security_digest_user]}
PROP_ORG_OPENCASTPROJECT_ADMIN_UI_URL=${parameters[app_prop_org_opencastproject_admin_ui_url]}
PROP_ORG_OPENCASTPROJECT_ENGAGE_UI_URL=${parameters[app_prop_org_opencastproject_engage_ui_url]}

DISABLE_INSTALL_DEMO_CONFIG=true
DISABLE_SECURITY_PLUGIN=true
OPENSEARCH_JAVA_OPTS=${parameters[app_opensearch_java_opts]}
BOOTSTRAP_MEMORY_LOCK=true
DISCOVERY_TYPE=single-node
EOF

  logger::title "Create Docker Volumes"
  logger::info "Stoping all previously deployed containers..."
  current_deployment_index=$(basename "$(pwd)")
  while [[ ${current_deployment_index} -gt 0 ]]; do
    (( --current_deployment_index ))
    docker-compose \
      --env-file=config.env \
      --file="../${current_deployment_index}/docker-compose-adminpresentation.yml" \
      down
  done

  logger::info "Removing previously defined docker volumes, if any..."
  for volume in $(docker volume ls | grep -v "VOLUME" | awk '{print $2}'); do
    docker volume rm "${volume}"
  done

  logger::info "Adding new or updated docker volume definitions..."
  docker volume create --name "$(basename "${SHARE_DATA_PATH}")" --driver=local -o o=bind -o type=none -o "device=${SHARE_DATA_PATH}"
  docker volume create --name "$(basename "${SHARE_OPENSEARCH_PATH}")" --driver=local -o o=bind -o type=none -o "device=${SHARE_OPENSEARCH_PATH}"

  logger::title "Starting OpenCast..."
  docker-compose --env-file=config.env -f docker-compose-adminpresentation.yml up -d

  #############################################################################

  logger::title "End of $0"
  utils::unset_exit_trap
}

main "$@"
